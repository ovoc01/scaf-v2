file-generable = entity,service,repository,rest-controller
cli-project-generation = spring init --build ##build --description "Our first Spring Boot application"  --dependencies web,data-jpa,postgresql,spring-boot-starter-validation --group-id ##basePackage --java-version 17 ##projectName --name=##projectName


##entity configuration
entity.imports = java.util.List,jakarta.persistence.Entity,jakarta.persistence.Id,jakarta.persistence.GeneratedValue,jakarta.persistence.GenerationType,jakarta.persistence.Column,jakarta.persistence.Table,com.fasterxml.jackson.annotation.JsonBackReference,com.fasterxml.jackson.annotation.JsonManagedReference,jakarta.persistence.FetchType,jakarta.persistence.CascadeType,jakarta.persistence.JoinColumn,jakarta.persistence.ManyToOne,jakarta.persistence.OneToMany,lombok.Builder,lombok.NoArgsConstructor,lombok.AllArgsConstructor
entity.annotation = Entity,Table(name="[tableName]"),Builder,NoArgsConstructor
entity.id-marks = Id,GeneratedValue(strategy=GenerationType.IDENTITY)
entity.column-mark = Column
entity.exported-keys-mark = OneToMany(fetch=FetchType.LAZY, mappedBy="##table_exporter", cascade=CascadeType.ALL)
entity.exported-keys-list = List<##referenceTable> 
entity.imported-keys-mark = ManyToOne(cascade=CascadeType.ALL);JoinColumn(name="##fkcolumn_name")
entity.inheritance = none
entity.declaration = none

##noArgsConstructor
!!noArgsConstructor


##repository configuration
repository.imports = org.springframework.data.jpa.repository.JpaRepository,org.springframework.stereotype.Repository
repository.annotation = Repository
repository.inheritance = JpaRepository<[entityName],##primaryKeyType>

## service configuration

service.imports = java.util.List,java.util.Optional,org.springframework.stereotype.Service,org.springframework.beans.factory.annotation.Autowired
service.annotation = Service
service.inheritance = none
service.injection-annotation = Autowired
service.declaration = public interface
##service-methods
    public List<[entityName]> findAll() {
        return [camelCasedName]Repository.findAll();
    }


    public Optional<[entityName]> findById(##primaryKeyType id) {
        return [camelCasedName]Repository.findById(id);
    }


    public [entityName] save([entityName] [camelCasedName]) {
        return [camelCasedName]Repository.save([camelCasedName]);
    }


    public [entityName] update([entityName] [camelCasedName]) {
        return [camelCasedName]Repository.save([camelCasedName]);
    }

    public void deleteById(##primaryKeyType id) {
        [camelCasedName]Repository.deleteById(id);
    }
!!service-methods


##controller configuration
rest-controller.imports = org.springframework.beans.factory.annotation.Autowired,org.springframework.web.bind.annotation.*,java.util.HashMap,org.springframework.http.HttpStatus,java.util.List,org.springframework.stereotype.Controller,org.springframework.ui.Model,jakarta.validation.Valid,org.springframework.validation.BindingResult
rest-controller.inheritance = none
rest-controller.annotation = Controller,RequestMapping("/[camelCasedName]s")
rest-controller.injection-annotation = Autowired
##controller-methods
    @GetMapping
    public String list[entityName](Model model) {
        model.addAttribute("[camelCasedName]s", [camelCasedName]Service.findAll());
        return "[camelCasedName]/index"; // View name: bookList.jsp
    }


    @GetMapping("/new")
    public String showCreateForm(Model model) {
        model.addAttribute("[camelCasedName]", new [entityName]());
        return "[camelCasedName]/form"; // View name: bookForm.jsp
    }


    @PostMapping
    public String create[entityName](@Valid [entityName] [camelCasedName],BindingResult result,Model model) {
        if(result.hasErrors()){
            model.addAttribute("bindingResult", result);
            return "[camelCasedName]/form";
        }
        [camelCasedName]Service.save([camelCasedName]);
        return "redirect:/[camelCasedName]s"; // Redirect to book list
    }


    @GetMapping("/edit/{id}")
    public String showEditForm(@PathVariable ##primaryKeyType id, Model model) {
        [entityName] [camelCasedName] = [camelCasedName]Service.findById(id)
                    .orElseThrow(() -> new IllegalArgumentException("Invalid [camelCasedName] Id:" + id));
        model.addAttribute("[camelCasedName]s", [camelCasedName]);
        return "[camelCasedName]/edit"; 
    }

    @PostMapping("/update/{id}")
    public String updateBook(@PathVariable ##primaryKeyType id, @Valid [entityName] [camelCasedName],BindingResult result,Model model) {
        if(result.hasErrors()){
            model.addAttribute("bindingResult", result);
            return "[camelCasedName]/edit";
        }
        [camelCasedName]Service.save([camelCasedName]);
        model.addAttribute("message","New [entityName] saved");
        return "redirect:/[camelCasedName]s"; // Redirect to book list
    }


    @GetMapping("/delete/{id}")
    public String deleteBook(@PathVariable ##primaryKeyType id) {
        [camelCasedName]Service.deleteById(id);
        return "redirect:/[camelCasedName]s"; // Redirect to book list
    }

!!controller-methods
