file-generable = entity,service,repository,rest-controller
cli-project-generation = spring init --build ##build --description "Our first Spring Boot application"  --dependencies web,data-jpa,postgresql --group-id ##basePackage --java-version 17 ##projectName --name=##projectName


##entity configuration
entity.imports = java.util.List,jakarta.persistence.Entity,jakarta.persistence.Id,jakarta.persistence.GeneratedValue,jakarta.persistence.GenerationType,jakarta.persistence.Column,jakarta.persistence.Table,com.fasterxml.jackson.annotation.JsonBackReference,com.fasterxml.jackson.annotation.JsonManagedReference,jakarta.persistence.FetchType,jakarta.persistence.CascadeType,jakarta.persistence.JoinColumn,jakarta.persistence.ManyToOne,jakarta.persistence.OneToMany
entity.annotation = Entity,Table(name="[tableName]")
entity.id-marks = Id
entity.column-mark = Column
entity.exported-keys-mark = OneToMany(fetch=FetchType.LAZY, mappedBy="##table_exporter", cascade=CascadeType.ALL);JsonManagedReference
entity.exported-keys-list = List<##referenceTable> 
entity.imported-keys-mark = ManyToOne(cascade=CascadeType.ALL);JoinColumn(name="##fkcolumn_name");JsonBackReference
entity.inheritance = none

##noArgsConstructor
!!noArgsConstructor


##repository configuration
repository.imports = org.springframework.data.jpa.repository.JpaRepository,org.springframework.stereotype.Repository
repository.annotation = Repository
repository.inheritance = JpaRepository<[entityName],##primaryKeyType>

## service configuration

service.imports = java.util.List,java.util.Optional,org.springframework.stereotype.Service,org.springframework.beans.factory.annotation.Autowired
service.annotation = Service
service.inheritance = none
service.injection-annotation = Autowired
service.declaration = public interface
##service-methods
   public List<[entityName]> getAllEntities() {
        return [camelCasedName]Repository.findAll();
    }


    public Optional<[entityName]> getEntityById(##primaryKeyType id) {
        return [camelCasedName]Repository.findById(id);
    }


    public [entityName] saveEntity([entityName] [camelCasedName]) {
        return [camelCasedName]Repository.save([camelCasedName]);
    }


    public [entityName] updateEntity([entityName] [camelCasedName]) {
        return [camelCasedName]Repository.save([camelCasedName]);
    }

    public void deleteEntityById(##primaryKeyType id) {
        [camelCasedName]Repository.deleteById(id);
    }
!!service-methods


##controller configuration
rest-controller.imports = org.springframework.beans.factory.annotation.Autowired,org.springframework.web.bind.annotation.*,java.util.HashMap,org.springframework.http.ResponseEntity,org.springframework.http.HttpStatus,java.util.List,org.springframework.web.bind.annotation.CrossOrigin
rest-controller.inheritance = none
rest-controller.annotation = RestController,RequestMapping("/[camelCasedName]s"),CrossOrigin("*")
rest-controller.injection-annotation = Autowired
##controller-methods
    @GetMapping
    public ResponseEntity<Object> getAll[entityName]() {
        HashMap<String,Object> data = new HashMap<>();
        try{
            List<[entityName]>[camelCasedName]s =  [camelCasedName]Service.getAllEntities();
            data.put("[camelCasedName]s",[camelCasedName]s);
            return new ResponseEntity<>(data, HttpStatus.OK);
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }

    }

    @PostMapping
    public ResponseEntity<Object> create[entityName](@RequestBody [entityName] [camelCasedName]){
        HashMap<String,Object> data = new HashMap<>();
        try{
            [camelCasedName]Service.saveEntity([camelCasedName]);
            data.put("message","[entityName] created successfully");
            return new ResponseEntity<>(data, HttpStatus.CREATED);
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }
    }


    @PutMapping("/{id}")
    public ResponseEntity<Object> update[entityName](@PathVariable("id")##primaryKeyType id){
        HashMap<String,Object> data = new HashMap<>();

        try{
            //TODO
            return ResponseEntity.ok("success");
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }
    }


!!controller-methods
