file-generable = entity,rest-controller
cli-project-generation = spring init --build ##build --description "Our first Spring Boot application"  --dependencies web,postgresql --group-id ##basePackage --java-version 17 ##projectName


##entity configuration
entity.imports = com.ovoc01.funkyfrog.core.annotation.Column,com.ovoc01.funkyfrog.core.annotation.Mapping,com.ovoc01.funkyfrog.core.annotation.PrimaryKey,com.ovoc01.funkyfrog.core.mapping.BddObjectImpl
entity.annotation = Mapping(database="##dbName")
entity.id-marks = PrimaryKey(seq="seq_[tableName]",prefix="##first3")
entity.column-mark = Column
entity.inheritance = BddObjectImpl

##noArgsConstructor
!!noArgsConstructor


##repository configuration

## service configuration

service.imports = java.util.List,java.util.Optional,org.springframework.stereotype.Service,org.springframework.beans.factory.annotation.Autowired
service.annotation = Service
service.inheritance = none
service.injection-annotation = Autowired
service.declaration = public interface

##service-methods
   public List<[entityName]> getAllEntities() {
        return [tableName]Repository.findAll();
    }


    public Optional<[entityName]> getEntityById(##primaryKeyType id) {
        return [tableName]Repository.findById(id);
    }


    public [entityName] saveEntity([entityName] [tableName]) {
        return [tableName]Repository.save([tableName]);
    }


    public [entityName] updateEntity([entityName] [tableName]) {
        return [tableName]Repository.save([tableName]);
    }

    public void deleteEntityById(##primaryKeyType id) {
        [tableName]Repository.deleteById(id);
    }
!!service-methods


##controller configuration
rest-controller.imports = org.springframework.beans.factory.annotation.Autowired,org.springframework.web.bind.annotation.*,java.util.HashMap,org.springframework.http.ResponseEntity,org.springframework.http.HttpStatus,java.util.List,com.ovoc01.funkyfrog.core.connection.FConnexion,java.sql.Connection
rest-controller.inheritance = none
rest-controller.inheritance = none
rest-controller.annotation = RestController,RequestMapping("/[tableName]")
rest-controller.injection-annotation = none
##controller-methods
    @GetMapping
    public ResponseEntity<Object> getAll[entityName]() {
        HashMap<String,Object> data = new HashMap();
        try{
            try(Connection c = FConnexion.sessionConnection("connection1")){
               [entityName][] [tableName]s =  new [entityName]().fetchAll(c);
               data.put("[tableName]s",[tableName]s);
               return new ResponseEntity<>(data, HttpStatus.OK);
            }
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }

    }

    @PostMapping
    public ResponseEntity<Object> create[entityName](@RequestBody [entityName] [tableName]){
        HashMap<String,Object> data = new HashMap();
        try{
            try(Connection c = FConnexion.sessionConnection("connection1")){
               [tableName].persist(c);
               c.commit();
               data.put("message","[entityName] created successfully");
               return ResponseEntity.ok(data);
            }
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }
    }


    @PutMapping("/{id}")
    public ResponseEntity<Object> update[entityName](@PathVariable("id")##primaryKeyType id){
        HashMap<String,Object> data = new HashMap();

        try{
            //TODO
            return ResponseEntity.ok("success");
        }catch(Exception e){
            data.put("error",e.getMessage());
            return ResponseEntity.badRequest().body(data);
        }
    }


!!controller-methods
